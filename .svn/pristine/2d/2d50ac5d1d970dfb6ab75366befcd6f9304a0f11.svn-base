<template>
  <div class="table">
    <div class="container">
      <div style="float:right; margin-bottom:6px;">
        <el-button type="primary" @click="openSend()">发送</el-button>
        <el-button type="primary" @click="openAddForm()">添加</el-button>
      </div>
      <el-table :data="tableData" border class="table" ref="multipleTable">
        <el-table-column prop="Id" align="center" label="ID"></el-table-column>
        <el-table-column prop="Name" align="center" label="姓名"></el-table-column>
        <el-table-column prop="Mobile" align="center" label="手机号"></el-table-column>
        <el-table-column align="center" label="性别">
          <template slot-scope="scope">{{scope.row.Sex ==1?"男":"女"}}</template>
        </el-table-column>
        <el-table-column align="center" label="状态">
          <template slot-scope="scope">
            <el-switch
              v-model="scope.row.Status"
              active-text="有效"
              inactive-text="无效"
              :active-value="1"
              :inactive-value="2"
              @change="_TemplatePersonStatusModify($event, scope.row.Id)"
            ></el-switch>
          </template>
        </el-table-column>
        <el-table-column prop="CreateTime" align="center" label="创建时间"></el-table-column>

        <el-table-column label="操作" width="200" align="center">
          <template slot-scope="scope">
            <el-button class="red" type="text" @click="deleteData(scope.row)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
      <div class="pagination">
        <el-pagination
          background
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
          :current-page="currentPage"
          :page-sizes="[10, 20, 30, 40, 50]"
          :page-size="pageSize"
          layout="total, sizes, prev, pager, next, jumper"
          :total="pageCount"
        ></el-pagination>
      </div>

      <!--添加弹窗-->
      <el-dialog title="添加测试" :visible.sync="addVisible" width="500px">
        <el-form
          :model="addForm"
          :rules="rules"
          ref="ruleForm"
          label-width="100px"
          class="demo-ruleForm"
        >
          <el-form-item label="姓名" prop="name">
            <el-input v-model="addForm.name"></el-input>
          </el-form-item>
          <el-form-item label="手机号码" prop="mobile">
            <el-input v-model="addForm.mobile"></el-input>
          </el-form-item>
          <el-form-item label="性别" v-model="addForm.sax" prop="sax">
            <el-radio-group v-model="addForm.sax">
              <el-radio :label="1">男</el-radio>
              <el-radio :label="2">女</el-radio>
            </el-radio-group>
          </el-form-item>
        </el-form>
        <span slot="footer" class="dialog-footer">
          <el-button @click="noShow">取 消</el-button>
          <el-button type="primary" @click="submitForm('ruleForm')">确 定</el-button>
        </span>
      </el-dialog>
    </div>
  </div>
</template>

<script>
import {
  TemplatePersonList,
  TemplatePersonAdd,
  TemplatePersonDelete,
  TemplateSend,
  TemplatePersonStatusModify
} from "api/seller.js";
export default {
  name: "SmsTemplateTestSend",
  data() {
    return {
      currentPage: 1,
      pageCount: 0,
      pageSize: 30,
      tableData: [],
      ctId: "",
      addVisible: false,
      addForm: {
        name: "",
        mobile: "",
        sax: ""
      },
      rules: {
        name: [{ required: true, message: "请输入姓名", trigger: "blur" }],
        mobile: [
          { required: true, message: "请输入手机号码", trigger: "blur" },
          { min: 11, max: 11, message: "请输入正确的手机号", trigger: "blur" }
        ],
        sax: [{ required: true, message: "请选择性别", trigger: "change" }]
      }
    };
  },
  mounted() {
    this.ctId = this.$route.params.id;
    this._TemplatePersonList();
  },
  methods: {
    //获取列表
    _TemplatePersonList() {
      const params = {
        Id: this.ctId,
        pageindex: this.currentPage,
        pagecount: this.pageSize
      };
      TemplatePersonList(params).then(res => {
        this.tableData = res.Data.List;
        this.pageCount = res.Data.TotalCount;
        console.log(res.Data);
      });
    },
    handleSizeChange(val) {
      this.pageSize = val;
      this._TemplatePersonList();
    },
    // 分页导航
    handleCurrentChange(val) {
      this.currentPage = val;
      this._TemplatePersonList();
    },
    //添加弹窗
    noShow() {
      this.addVisible = false;
      this.addForm = {};
    },
    openAddForm(item) {
      this.addVisible = true;
    },
    submitForm(ruleForm) {
        this.$refs[ruleForm].validate((valid) => {
          if (valid) {
            this._TemplatePersonAdd();
        this.addVisible = false;
        this._TemplatePersonList();
          } else {
            return false;
          }
        });
      },
    _TemplatePersonAdd() {
      const params = {
        CtId: this.ctId,
        Name: this.addForm.name,
        Mobile: this.addForm.mobile,
        Sex: this.addForm.sax
      };
      TemplatePersonAdd(params).then(res => {
        this.$message({
          message: "添加成功",
          showClose: true,
          type: "success"
        });
      });
    },
    //是否发送
    openSend() {
      this.$confirm("是否确认发送?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        this._TemplateSend();
      });
    },
    _TemplateSend() {
      const params = {
        CtId: this.ctId
      };
      TemplateSend(params).then(res => {
        this.$message({
          message: "发送成功",
          showClose: true,
          type: "success"
        });
      });
    },
    _TemplatePersonStatusModify(status, id) {
      const params = {
        Id: id,
        Status: status
      };
      TemplatePersonStatusModify(params).then(res => {
        if (res.Success) {
          this.$message({
            showClose: true,
            message: "状态更新成功",
            type: "success"
          });
        }
      });
    },
    //删除
    deleteData(item) {
      this.$confirm("此操作将永久删除该项, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        this._TemplatePersonDelete(item.Id).then(val => {
          this._TemplatePersonList();
          this.$message({
            showClose: true,
            message: "删除成功",
            type: "success"
          });
        });
      });
    },
    _TemplatePersonDelete(Id) {
      const params = {
        Id: Id
      };
      return TemplatePersonDelete(params);
    }
  }
};
</script>

<style scoped>
.red {
  color: red;
}
</style>